{
	"info": {
		"_postman_id": "439c47b5-01aa-4f10-876a-04e880af9a77",
		"name": "Sudoku",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Local",
			"item": [
				{
					"name": "solve (Local)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9401e4bb-aa25-4fcd-9e6c-ebba0a9c3cc9",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle status should be solved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var status = jsonData['status'];",
									"    pm.expect(status).to.eql('Solved');",
									"});",
									"",
									"pm.test(\"puzzle message should be successfully solved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('Puzzle successfully solved.');",
									"});",
									"",
									"pm.test(\"puzzle object should have expected puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    var test_puzzle_rows = [",
									"      [5, 8, 1, 9, 6, 4, 7, 2, 3],",
									"      [7, 2, 4, 5, 1, 3, 6, 9, 8],",
									"      [3, 6, 9, 7, 8, 2, 4, 1, 5],",
									"      [4, 1, 3, 2, 5, 7, 8, 6, 9],",
									"      [2, 9, 6, 3, 4, 8, 1, 5, 7],",
									"      [8, 5, 7, 1, 9, 6, 2, 3, 4],",
									"      [1, 4, 2, 8, 3, 9, 5, 7, 6],",
									"      [9, 7, 8, 6, 2, 5, 3, 4, 1],",
									"      [6, 3, 5, 4, 7, 1, 9, 8, 2]",
									"    ];",
									"    ",
									"    ",
									"    pm.expect(puzzle_rows).to.eql(test_puzzle_rows);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"puzzle_rows\":[\n        [0,8,0,0,6,4,7,0,3],\n        [7,2,0,5,0,3,6,9,8],\n        [0,0,0,0,0,2,4,1,0],\n        [0,0,0,0,0,7,0,0,9],\n        [0,9,6,3,0,8,1,5,0],\n        [8,0,0,1,0,0,0,0,0],\n        [0,4,2,8,0,0,0,0,0],\n        [9,7,8,6,0,5,0,4,1],\n        [6,0,5,4,7,0,0,8,0]\n    ]\n}"
						},
						"url": {
							"raw": "http://127.0.0.1:3000/solve",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"solve"
							]
						}
					},
					"response": []
				},
				{
					"name": "puzzle (Local)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1a2d8f8-b602-49f9-a255-54ca474c4de4",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle object should have a level of easy, meduim, hard, or extreme\", function () {",
									"    var jsonData = pm.response.json();",
									"    var level = jsonData['level'];",
									"    pm.expect(level).to.be.oneOf(['easy', 'medium', 'hard', 'exteme']);",
									"});",
									"",
									"pm.test(\"puzzle object should have 9 puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    pm.expect(puzzle_rows.length).to.eql(9);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "eyJraWQiOiJvckcyamxKSlk1dzkzbXI2VkpIXC80eStyQUs1eEI2VjVMOThUZDB6UG5CND0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhNjA0NjJmZS1iMTdiLTQyOTEtOGU5MS0wYzM0YWVjNzdiMDYiLCJhdWQiOiI0anJ1ZDJpdTFqYTZlc2dqaGtmNHVzZnFoIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiOWI3ZjhiOWMtODg5Ni0xMWU5LWIzNzgtOTU2ODYxMTllNzJkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE1NTk4NTE2MDQsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS13ZXN0LTEuYW1hem9uYXdzLmNvbVwvZXUtd2VzdC0xX1RHaDRFYzJjeCIsImNvZ25pdG86dXNlcm5hbWUiOiJhNjA0NjJmZS1iMTdiLTQyOTEtOGU5MS0wYzM0YWVjNzdiMDYiLCJleHAiOjE1NjA4NDg1NTIsImlhdCI6MTU2MDg0NDk1MiwiZW1haWwiOiJidXJnZXNzLmFsZXhhbmRlcit0ZXN0M0BnbWFpbC5jb20ifQ.g90Ll13qKyKY2rCR7uvB4KhSc0oS54qmE55FDbDdWYEVEsaAw7swAylhO_7TYl1xUggIulOxZ9tDrSVEamfnzoa2Tyo3innVdwVENU4vCuJd49O0ypk_u1Be1Pf00UQ80UeHAKjOIK3d00RxMIUJVIYaoWcs3ALYTEg4WUfRYrTumgzXGLEpDJ-gb1VdUPwFniaLuv3xuXzyZW3sHhGFSNUUGcogAMtYyADttUiVdvbfFbTBi9Rm49fLNmG15J_LAcR3k-wbMMBfcZVFgCR_cKL7RDu8yH02DtaVDGMEjREnclOTqSSGRbiJo-72YyLa4UZQFcOvFfzmJpb98C42pg",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3000/puzzle",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"puzzle"
							]
						}
					},
					"response": []
				},
				{
					"name": "puzzle with ID (Local)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05b8b038-cfaf-4ca1-bdf9-6474e97cf69b",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle object level should be easy\", function () {",
									"    var jsonData = pm.response.json();",
									"    var level = jsonData['level'];",
									"    pm.expect(level).to.eql('easy');",
									"});",
									"",
									"pm.test(\"puzzle object should have expected puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    var test_puzzle_rows = [",
									"      [5, 8, 1, 9, 6, 4, 7, 2, 3],",
									"      [7, 2, 4, 5, 1, 3, 6, 9, 8],",
									"      [3, 6, 9, 7, 8, 2, 4, 1, 5],",
									"      [4, 1, 3, 2, 5, 7, 8, 6, 9],",
									"      [2, 9, 6, 3, 4, 8, 1, 5, 7],",
									"      [8, 5, 7, 1, 9, 6, 2, 3, 4],",
									"      [1, 4, 2, 8, 3, 9, 5, 7, 6],",
									"      [9, 7, 8, 6, 2, 5, 3, 4, 1],",
									"      [6, 3, 5, 4, 7, 1, 9, 8, 2]",
									"    ];",
									"    ",
									"    ",
									"    pm.expect(puzzle_rows).to.eql(test_puzzle_rows);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "eyJraWQiOiJvckcyamxKSlk1dzkzbXI2VkpIXC80eStyQUs1eEI2VjVMOThUZDB6UG5CND0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIxNGIyYWFiNC1kZWFkLTQwOGMtYmIyZS0zZGVmN2U2ODg0ZmEiLCJhdWQiOiI0anJ1ZDJpdTFqYTZlc2dqaGtmNHVzZnFoIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiOTYyZTc2MjMtODg5Ni0xMWU5LWIzNzgtOTU2ODYxMTllNzJkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE1NTk4NTE1OTUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5ldS13ZXN0LTEuYW1hem9uYXdzLmNvbVwvZXUtd2VzdC0xX1RHaDRFYzJjeCIsImNvZ25pdG86dXNlcm5hbWUiOiIxNGIyYWFiNC1kZWFkLTQwOGMtYmIyZS0zZGVmN2U2ODg0ZmEiLCJleHAiOjE1NjA4NTUwMzcsImlhdCI6MTU2MDg1MTQzNywiZW1haWwiOiJidXJnZXNzLmFsZXhhbmRlcit0ZXN0MUBnbWFpbC5jb20ifQ.AnoDRcusLo4pshwZuMXrjsdZlFY-bLKBOIWpx01n11KZkm8jCSTRz2a5D48aIEs9uTOhiaJOV4ucPv_7kSpPfKCOVLd4bK1XTrKZ2oK5AOruFloUqykj_DyxG124ITxCZJvpSAu-WMsUwK03D_c2k1lT3n5f6pCzxz_8sZW5kVgTE0yhEAP6EobBf8svU3AabuVW_IvDFurjxMFShh_SOzyz-eJKnRb-1Id3HV6waPdMUyYAaTWXZjNJcqYb7sfbSv9_0Naj342KPQKu50X29GIdhibqf6McJ02sbIUTTf_TtiVXqmYuzsEn5Mg2-nit74c1YfHsR_3RZGw34GmTuA",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3000/puzzle/1.json",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"puzzle",
								"1.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test",
			"item": [
				{
					"name": "solve (Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29476423-2fd4-4ced-826d-06275364a50c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle status should be solved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var status = jsonData['status'];",
									"    pm.expect(status).to.eql('Solved');",
									"});",
									"",
									"pm.test(\"puzzle message should be successfully solved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('Puzzle successfully solved.');",
									"});",
									"",
									"pm.test(\"puzzle object should have expected puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    var test_puzzle_rows = [",
									"      [5, 8, 1, 9, 6, 4, 7, 2, 3],",
									"      [7, 2, 4, 5, 1, 3, 6, 9, 8],",
									"      [3, 6, 9, 7, 8, 2, 4, 1, 5],",
									"      [4, 1, 3, 2, 5, 7, 8, 6, 9],",
									"      [2, 9, 6, 3, 4, 8, 1, 5, 7],",
									"      [8, 5, 7, 1, 9, 6, 2, 3, 4],",
									"      [1, 4, 2, 8, 3, 9, 5, 7, 6],",
									"      [9, 7, 8, 6, 2, 5, 3, 4, 1],",
									"      [6, 3, 5, 4, 7, 1, 9, 8, 2]",
									"    ];",
									"    ",
									"    ",
									"    pm.expect(puzzle_rows).to.eql(test_puzzle_rows);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"puzzle_rows\":[\n        [0,8,0,0,6,4,7,0,3],\n        [7,2,0,5,0,3,6,9,8],\n        [0,0,0,0,0,2,4,1,0],\n        [0,0,0,0,0,7,0,0,9],\n        [0,9,6,3,0,8,1,5,0],\n        [8,0,0,1,0,0,0,0,0],\n        [0,4,2,8,0,0,0,0,0],\n        [9,7,8,6,0,5,0,4,1],\n        [6,0,5,4,7,0,0,8,0]\n    ]\n}"
						},
						"url": {
							"raw": "https://dpb02w7qyi.execute-api.eu-west-1.amazonaws.com/test/solve",
							"protocol": "https",
							"host": [
								"dpb02w7qyi",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"test",
								"solve"
							]
						}
					},
					"response": []
				},
				{
					"name": "solve with invalid puzzle (Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29476423-2fd4-4ced-826d-06275364a50c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.error;",
									"     ",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle status should be an error\", function () {",
									"    var jsonData = pm.response.json();",
									"    var error = jsonData['error'];",
									"    pm.expect(error).to.eql('Puzzle was not validated due to invalid row, column or grid.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"puzzle_rows\":[\n        [8,8,0,0,6,4,7,0,3],\n        [7,2,0,5,0,3,6,9,8],\n        [0,0,0,0,0,2,4,1,0],\n        [0,0,0,0,0,7,0,0,9],\n        [0,9,6,3,0,8,1,5,0],\n        [8,0,0,1,0,0,0,0,0],\n        [0,4,2,8,0,0,0,0,0],\n        [9,7,8,6,0,5,0,4,1],\n        [6,0,5,4,7,0,0,8,0]\n    ]\n}"
						},
						"url": {
							"raw": "https://dpb02w7qyi.execute-api.eu-west-1.amazonaws.com/test/solve",
							"protocol": "https",
							"host": [
								"dpb02w7qyi",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"test",
								"solve"
							]
						}
					},
					"response": []
				},
				{
					"name": "puzzle (Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb5c3386-0aeb-471a-a2b6-339788e170db",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle object should have a level of easy, meduim, hard, or extreme\", function () {",
									"    var jsonData = pm.response.json();",
									"    var level = jsonData['level'];",
									"    pm.expect(level).to.be.oneOf(['easy', 'medium', 'hard', 'exteme']);",
									"});",
									"",
									"pm.test(\"puzzle object should have 9 puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    pm.expect(puzzle_rows.length).to.eql(9);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "auth",
								"type": "text",
								"value": "allow"
							}
						],
						"url": {
							"raw": "https://8vsecano3i.execute-api.eu-west-1.amazonaws.com/test/puzzle",
							"protocol": "https",
							"host": [
								"8vsecano3i",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"test",
								"puzzle"
							]
						}
					},
					"response": []
				},
				{
					"name": "puzzle with ID (Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb0aefa7-78e5-4d8f-9be6-310635b44a1d",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle object level should be easy\", function () {",
									"    var jsonData = pm.response.json();",
									"    var level = jsonData['level'];",
									"    pm.expect(level).to.eql('easy');",
									"});",
									"",
									"pm.test(\"puzzle object should have expected puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    var test_puzzle_rows = [",
									"      [5, 8, 1, 9, 6, 4, 7, 2, 3],",
									"      [7, 2, 4, 5, 1, 3, 6, 9, 8],",
									"      [3, 6, 9, 7, 8, 2, 4, 1, 5],",
									"      [4, 1, 3, 2, 5, 7, 8, 6, 9],",
									"      [2, 9, 6, 3, 4, 8, 1, 5, 7],",
									"      [8, 5, 7, 1, 9, 6, 2, 3, 4],",
									"      [1, 4, 2, 8, 3, 9, 5, 7, 6],",
									"      [9, 7, 8, 6, 2, 5, 3, 4, 1],",
									"      [6, 3, 5, 4, 7, 1, 9, 8, 2]",
									"    ];",
									"    ",
									"    ",
									"    pm.expect(puzzle_rows).to.eql(test_puzzle_rows);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://8vsecano3i.execute-api.eu-west-1.amazonaws.com/test/puzzle/1.json",
							"protocol": "https",
							"host": [
								"8vsecano3i",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"test",
								"puzzle",
								"1.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Staging",
			"item": [
				{
					"name": "solve (Staging)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb22cefe-0b59-4335-9471-b6ec73f08b5d",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle status should be solved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var status = jsonData['status'];",
									"    pm.expect(status).to.eql('Solved');",
									"});",
									"",
									"pm.test(\"puzzle message should be successfully solved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('Puzzle successfully solved.');",
									"});",
									"",
									"pm.test(\"puzzle object should have expected puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    var test_puzzle_rows = [",
									"      [5, 8, 1, 9, 6, 4, 7, 2, 3],",
									"      [7, 2, 4, 5, 1, 3, 6, 9, 8],",
									"      [3, 6, 9, 7, 8, 2, 4, 1, 5],",
									"      [4, 1, 3, 2, 5, 7, 8, 6, 9],",
									"      [2, 9, 6, 3, 4, 8, 1, 5, 7],",
									"      [8, 5, 7, 1, 9, 6, 2, 3, 4],",
									"      [1, 4, 2, 8, 3, 9, 5, 7, 6],",
									"      [9, 7, 8, 6, 2, 5, 3, 4, 1],",
									"      [6, 3, 5, 4, 7, 1, 9, 8, 2]",
									"    ];",
									"    ",
									"    ",
									"    pm.expect(puzzle_rows).to.eql(test_puzzle_rows);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"puzzle_rows\":[\n        [0,8,0,0,6,4,7,0,3],\n        [7,2,0,5,0,3,6,9,8],\n        [0,0,0,0,0,2,4,1,0],\n        [0,0,0,0,0,7,0,0,9],\n        [0,9,6,3,0,8,1,5,0],\n        [8,0,0,1,0,0,0,0,0],\n        [0,4,2,8,0,0,0,0,0],\n        [9,7,8,6,0,5,0,4,1],\n        [6,0,5,4,7,0,0,8,0]\n    ]\n}"
						},
						"url": {
							"raw": "https://d8xwct5899.execute-api.eu-west-1.amazonaws.com/staging/solve",
							"protocol": "https",
							"host": [
								"d8xwct5899",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"staging",
								"solve"
							]
						}
					},
					"response": []
				},
				{
					"name": "solve with invalid puzzle (Staging)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29476423-2fd4-4ced-826d-06275364a50c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.error;",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle status should be an error\", function () {",
									"    var jsonData = pm.response.json();",
									"    var error = jsonData['error'];",
									"    pm.expect(error).to.eql('Puzzle was not validated due to invalid row, column or grid.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"puzzle_rows\":[\n        [8,8,0,0,6,4,7,0,3],\n        [7,2,0,5,0,3,6,9,8],\n        [0,0,0,0,0,2,4,1,0],\n        [0,0,0,0,0,7,0,0,9],\n        [0,9,6,3,0,8,1,5,0],\n        [8,0,0,1,0,0,0,0,0],\n        [0,4,2,8,0,0,0,0,0],\n        [9,7,8,6,0,5,0,4,1],\n        [6,0,5,4,7,0,0,8,0]\n    ]\n}"
						},
						"url": {
							"raw": "https://d8xwct5899.execute-api.eu-west-1.amazonaws.com/staging/solve",
							"protocol": "https",
							"host": [
								"d8xwct5899",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"staging",
								"solve"
							]
						}
					},
					"response": []
				},
				{
					"name": "puzzle (Staging)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96ace2df-190f-4fcf-b2f4-515391ac8b42",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle object should have a level of easy, meduim, hard, or extreme\", function () {",
									"    var jsonData = pm.response.json();",
									"    var level = jsonData['level'];",
									"    pm.expect(level).to.be.oneOf(['easy', 'medium', 'hard', 'exteme']);",
									"});",
									"",
									"pm.test(\"puzzle object should have 9 puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    pm.expect(puzzle_rows.length).to.eql(9);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "auth",
								"type": "text",
								"value": "allow"
							}
						],
						"url": {
							"raw": "https://9hhdkgzgo9.execute-api.eu-west-1.amazonaws.com/staging/puzzle",
							"protocol": "https",
							"host": [
								"9hhdkgzgo9",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"staging",
								"puzzle"
							]
						}
					},
					"response": []
				},
				{
					"name": "puzzle with ID (Staging)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9103669-3b75-470e-9cdb-d10ee73aca13",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle object level should be easy\", function () {",
									"    var jsonData = pm.response.json();",
									"    var level = jsonData['level'];",
									"    pm.expect(level).to.eql('easy');",
									"});",
									"",
									"pm.test(\"puzzle object should have expected puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    var test_puzzle_rows = [",
									"      [5, 8, 1, 9, 6, 4, 7, 2, 3],",
									"      [7, 2, 4, 5, 1, 3, 6, 9, 8],",
									"      [3, 6, 9, 7, 8, 2, 4, 1, 5],",
									"      [4, 1, 3, 2, 5, 7, 8, 6, 9],",
									"      [2, 9, 6, 3, 4, 8, 1, 5, 7],",
									"      [8, 5, 7, 1, 9, 6, 2, 3, 4],",
									"      [1, 4, 2, 8, 3, 9, 5, 7, 6],",
									"      [9, 7, 8, 6, 2, 5, 3, 4, 1],",
									"      [6, 3, 5, 4, 7, 1, 9, 8, 2]",
									"    ];",
									"    ",
									"    ",
									"    pm.expect(puzzle_rows).to.eql(test_puzzle_rows);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://9hhdkgzgo9.execute-api.eu-west-1.amazonaws.com/staging/puzzle/1.json",
							"protocol": "https",
							"host": [
								"9hhdkgzgo9",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"staging",
								"puzzle",
								"1.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Prod",
			"item": [
				{
					"name": "solve (Prod)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89fcc20d-f926-4b32-b9d1-22528a252d5a",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle status should be solved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var status = jsonData['status'];",
									"    pm.expect(status).to.eql('Solved');",
									"});",
									"",
									"pm.test(\"puzzle message should be successfully solved\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('Puzzle successfully solved.');",
									"});",
									"",
									"pm.test(\"puzzle object should have expected puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    var test_puzzle_rows = [",
									"      [5, 8, 1, 9, 6, 4, 7, 2, 3],",
									"      [7, 2, 4, 5, 1, 3, 6, 9, 8],",
									"      [3, 6, 9, 7, 8, 2, 4, 1, 5],",
									"      [4, 1, 3, 2, 5, 7, 8, 6, 9],",
									"      [2, 9, 6, 3, 4, 8, 1, 5, 7],",
									"      [8, 5, 7, 1, 9, 6, 2, 3, 4],",
									"      [1, 4, 2, 8, 3, 9, 5, 7, 6],",
									"      [9, 7, 8, 6, 2, 5, 3, 4, 1],",
									"      [6, 3, 5, 4, 7, 1, 9, 8, 2]",
									"    ];",
									"    ",
									"    ",
									"    pm.expect(puzzle_rows).to.eql(test_puzzle_rows);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"puzzle_rows\":[\n        [0,8,0,0,6,4,7,0,3],\n        [7,2,0,5,0,3,6,9,8],\n        [0,0,0,0,0,2,4,1,0],\n        [0,0,0,0,0,7,0,0,9],\n        [0,9,6,3,0,8,1,5,0],\n        [8,0,0,1,0,0,0,0,0],\n        [0,4,2,8,0,0,0,0,0],\n        [9,7,8,6,0,5,0,4,1],\n        [6,0,5,4,7,0,0,8,0]\n    ]\n}"
						},
						"url": {
							"raw": "https://z7nmly1tg8.execute-api.eu-west-1.amazonaws.com/prod/solve",
							"protocol": "https",
							"host": [
								"z7nmly1tg8",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"prod",
								"solve"
							]
						}
					},
					"response": []
				},
				{
					"name": "solve with invalid puzzle (Prod)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29476423-2fd4-4ced-826d-06275364a50c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.error;",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle status should be an error\", function () {",
									"    var jsonData = pm.response.json();",
									"    var error = jsonData['error'];",
									"    pm.expect(error).to.eql('Puzzle was not validated due to invalid row, column or grid.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"puzzle_rows\":[\n        [8,8,0,0,6,4,7,0,3],\n        [7,2,0,5,0,3,6,9,8],\n        [0,0,0,0,0,2,4,1,0],\n        [0,0,0,0,0,7,0,0,9],\n        [0,9,6,3,0,8,1,5,0],\n        [8,0,0,1,0,0,0,0,0],\n        [0,4,2,8,0,0,0,0,0],\n        [9,7,8,6,0,5,0,4,1],\n        [6,0,5,4,7,0,0,8,0]\n    ]\n}"
						},
						"url": {
							"raw": "https://z7nmly1tg8.execute-api.eu-west-1.amazonaws.com/prod/solve",
							"protocol": "https",
							"host": [
								"z7nmly1tg8",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"prod",
								"solve"
							]
						}
					},
					"response": []
				},
				{
					"name": "puzzle (Prod)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "747aed9f-4e4a-4730-96bb-833d284e7bd1",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle object should have a level of easy, meduim, hard, or extreme\", function () {",
									"    var jsonData = pm.response.json();",
									"    var level = jsonData['level'];",
									"    pm.expect(level).to.be.oneOf(['easy', 'medium', 'hard', 'exteme']);",
									"});",
									"",
									"pm.test(\"puzzle object should have 9 puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    pm.expect(puzzle_rows.length).to.eql(9);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://935gfu062f.execute-api.eu-west-1.amazonaws.com/prod/puzzle",
							"protocol": "https",
							"host": [
								"935gfu062f",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"prod",
								"puzzle"
							]
						}
					},
					"response": []
				},
				{
					"name": "puzzle with ID (Prod)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26a3e23f-e497-413d-9c65-55ede8b545c4",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"puzzle object level should be easy\", function () {",
									"    var jsonData = pm.response.json();",
									"    var level = jsonData['level'];",
									"    pm.expect(level).to.eql('easy');",
									"});",
									"",
									"pm.test(\"puzzle object should have expected puzzle_rows\", function () {",
									"    var jsonData = pm.response.json();",
									"    var puzzle_rows = jsonData['puzzle_rows'];",
									"    var test_puzzle_rows = [",
									"      [5, 8, 1, 9, 6, 4, 7, 2, 3],",
									"      [7, 2, 4, 5, 1, 3, 6, 9, 8],",
									"      [3, 6, 9, 7, 8, 2, 4, 1, 5],",
									"      [4, 1, 3, 2, 5, 7, 8, 6, 9],",
									"      [2, 9, 6, 3, 4, 8, 1, 5, 7],",
									"      [8, 5, 7, 1, 9, 6, 2, 3, 4],",
									"      [1, 4, 2, 8, 3, 9, 5, 7, 6],",
									"      [9, 7, 8, 6, 2, 5, 3, 4, 1],",
									"      [6, 3, 5, 4, 7, 1, 9, 8, 2]",
									"    ];",
									"    ",
									"    ",
									"    pm.expect(puzzle_rows).to.eql(test_puzzle_rows);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://935gfu062f.execute-api.eu-west-1.amazonaws.com/prod/puzzle/1.json",
							"protocol": "https",
							"host": [
								"935gfu062f",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"prod",
								"puzzle",
								"1.json"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}