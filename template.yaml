AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless resources for SudokuServerless application

Resources:
  UnsolvedPuzzleFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: apis/unsolved.handler
      Runtime: python3.6
      Description: Gets an unsolved puzzle from an s3 bucket
      Role: !GetAtt UnsolvedPuzzleFunctionRole.Arn
      Environment:
        Variables:
          UNSOLVED_BUCKET_NAME: 'sudoku-unsolved-puzzles'
      Events:
        GetNewPuzzle:
          Type: Api
          Properties:
            Path: /unsolvedPuzzle
            Method: get

  UnsolvedPuzzlesBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'sudoku-unsolved-puzzles'

  UnsolvedPuzzleFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'SudokuServerless-UnsolvedPuzzle-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - lambda.amazonaws.com
          Action: 
            - sts:AssumeRole
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
    
  SolvePuzzleFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: apis/solve.handler
      Runtime: python3.6
      Description: Solves an incomplete puzzle and uploads it to an s3 bucket
      Role: !GetAtt SolvePuzzleFunctionRole.Arn
      Environment:
        Variables:
            SOLVED_BUCKET_NAME: 'sudoku-solved-puzzles'
      Events:
        SolvePuzzle:
          Type: Api
          Properties:
            Path: /solvePuzzle
            Method: post

  SolvedPuzzlesBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'sudoku-solved-puzzles'

  SolvePuzzleFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'SudokuServerless-SolvePuzzle-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - lambda.amazonaws.com
          Action: 
            - sts:AssumeRole
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

Outputs:
  UnsolvedPuzzleFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for UnsolvedPuzzleFunction function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/unsolvedPuzzle/"

  UnsolvedPuzzleFunctionIamRole:
    Description: "Implicit IAM Role created for UnsolvedPuzzleFunction function"
    Value: !GetAtt UnsolvedPuzzleFunctionRole.Arn
  
  UnsolvedPuzzlesBucket:
    Description: "Bucket used to store unsolved sudoku puzzles"
    Value: !Ref UnsolvedPuzzlesBucket

  SolvePuzzleFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for SolvePuzzleFunction function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/solvePuzzle/"

  SolvePuzzleFunctionIamRole:
    Description: "Implicit IAM Role created for SolvePuzzleFunction function"
    Value: !GetAtt SolvePuzzleFunctionRole.Arn
  
  SolvedPuzzlesBucket:
    Description: "Bucket used to store solved sudoku puzzles"
    Value: !Ref SolvedPuzzlesBucket