AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless resources for tryNewPuzzle service

Parameters:
  CognitoUserPoolId:
    Type: String
    Default: eu-west-1_TGh4Ec2cx
  Environment:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - staging
      - dev
      - test
    ConstraintDescription: must specify prod, staging, dev or test.
  ServiceName:
    Description: Environment type.
    Default: tryNewPuzzle
    Type: String
  Description:
    Description: Description of service.
    Default: Gets an unsolved puzzle from an s3 bucket
    Type: String
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: !Sub '${ServiceName}-${Environment}'
        schemes:
        - "https"
        paths:
          "/tryNewPuzzle":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - SudokuServerlessAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          SudokuServerlessAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              providerARNs:
              - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
              type: "cognito_user_pools"


  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-${Environment}'
      Handler: try_new_puzzle/unsolved.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: !Ref Description
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          UNSOLVED_BUCKET_NAME: 'sudoku-unsolved-puzzles'
      Events:
        TryNewPuzzle:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /tryNewPuzzle
            Method: GET

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ServiceName}-${Environment}-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for Prod stage of Service
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/${ServiceName}/'

  FunctionIamRole:
    Description: Implicit IAM Role created for function
    Value: !GetAtt FunctionRole.Arn
